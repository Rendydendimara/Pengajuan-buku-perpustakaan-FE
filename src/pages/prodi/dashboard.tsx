import { ApiGetListStatistik } from '@/api/shared';
import AppTemplateProdiDashboard from '@/components/templates/AppTemplateProdiDashboard';
import Layout from '@/components/templates/Layout';
import { APP_NAME } from '@/constant';
import { ICombinedState } from '@/provider/redux/store';
import { Box, Flex, Heading, SimpleGrid, Text } from '@chakra-ui/layout';
import { createStandaloneToast } from '@chakra-ui/toast';
import { groupBy, orderBy } from 'lodash';
import moment from 'moment';
import type { NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import React, { useEffect, useState } from 'react';
import { BiSolidBarChartAlt2 } from 'react-icons/bi';
import { SlCalender } from 'react-icons/sl';
import { useSelector } from 'react-redux';
import {
  CartesianGrid,
  Legend,
  Line,
  LineChart,
  ResponsiveContainer,
  Tooltip,
  XAxis,
  YAxis,
} from 'recharts';

// interface IReduxStateWorkspace {
//   user?: IUser;
// }

const data = [
  {
    name: '2020',
    diterima: 100,
    ditolak: 10,
    selesai: 90,
    pengajuan: 100 + 10 + 90,
  },
  {
    name: '2021',
    diterima: 210,
    ditolak: 50,
    selesai: 60,
    pengajuan: 210 + 50 + 60,
  },
  {
    name: '2022',
    diterima: 50,
    ditolak: 10,
    selesai: 40,
    pengajuan: 10 + 50 + 40,
  },
  {
    name: '2023',
    diterima: 100,
    ditolak: 90,
    selesai: 10,
    pengajuan: 100 + 90 + 10,
  },
];

const CustomizedLabel: React.FC<any> = (props) => {
  const { x, y, stroke, value } = props;

  return (
    <text x={x} y={y} dy={-4} fill={stroke} fontSize={10} textAnchor='middle'>
      {value}
    </text>
  );
};

const CustomizedAxisTick: React.FC<any> = (props) => {
  const { x, y, stroke, payload } = props;

  return (
    <g transform={`translate(${x},${y})`}>
      <text
        x={0}
        y={0}
        dy={16}
        textAnchor='end'
        fill='#666'
        transform='rotate(-35)'
      >
        {payload.value}
      </text>
    </g>
  );
};

interface IDataStatistik {
  name: string;
  ditolak: number;
  selesai: number;
  pengajuan: number;
}

interface IReduxStateWorkspace {
  user: any;
}

const DashboardProdi: NextPage = () => {
  const router = useRouter();
  const { toast } = createStandaloneToast();
  const { user } = useSelector<ICombinedState, IReduxStateWorkspace>(
    (state) => {
      return {
        user: state.user.user,
      };
    }
  );
  const [dataStatistikGrafik, setDataStatistikGrafik] = useState<
    IDataStatistik[]
  >([]);
  const [dataStatistik, setDataStatistik] = useState({
    totalBuku: 0,
    totalKatalog: 0,
    totalPengajuanBuku: 0,
    totalPengajuanBukuSelesai: 0,
    totalPengajuanBukuGagal: 0,
    totalPengajuanBukuDalamProses: 0,
  });

  const getStatistik = async () => {
    const res = await ApiGetListStatistik({
      type: user?.programStudi,
      adminProdi: user?._id,
    });
    if (res.status === 200) {
      setDataStatistik(res.data.data);
      let dataPengajuan: any = [];
      res.data.data.dataPengajuanBuku.forEach((dt: any) => {
        dataPengajuan.push({
          ...dt,
          dateYear: new Date(dt.createdAt).getFullYear(),
        });
      });
      const orderByDate = orderBy(dataPengajuan, 'dateYear', 'asc');
      const groupByDate = groupBy(orderByDate, 'dateYear');
      const result: IDataStatistik[] = [];
      for (const year in groupByDate) {
        const dataDitolak = groupByDate[year].filter(
          (dt) => dt.status === 'ditolak'
        );
        const dataSelesai = groupByDate[year].filter(
          (dt) => dt.status === 'selesai'
        );
        result.push({
          name: year,
          ditolak: dataDitolak.length,
          selesai: dataSelesai.length,
          pengajuan: groupByDate[year].length,
        });
      }
      setDataStatistikGrafik(result);
    } else {
      toast({
        status: 'error',
        duration: 5000,
        title: 'Error',
        description: res.data.message,
        position: 'bottom-right',
      });
    }
  };

  // const { user } = useSelector<ICombinedState, IReduxStateWorkspace>(
  //   (state) => {
  //     return {
  //       user: state.user.user,
  //     };
  //   }
  // );

  useEffect(() => {
    getStatistik();
  }, []);

  return (
    <Layout>
      <Head>
        <title>{APP_NAME} | Prodi | Dashboard</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <AppTemplateProdiDashboard>
        <Box h='100%'>
          <Text fontSize='2xl'>Selamat Datang</Text>
          <Text>{user?.namaLengkap}namaLengkap, Admin Prodi</Text>
          <Flex
            alignItems='center'
            my='2'
            gap='2'
            boxShadow='lg'
            width='fit-content'
            p='4'
            borderRadius='8px'
            justifyContent='center'
          >
            <SlCalender size='30' />
            <Text fontSize='lg' fontWeight='bold'>
              Tanggal {moment().format('DD/MM/YYYY')}
            </Text>
          </Flex>
          <Box my='8'>
            <Heading as='h3' fontSize='24px' fontWeight='700'>
              Data Statistik
            </Heading>
            <Box my='4' h='400px'>
              <ResponsiveContainer width='100%' height='100%'>
                <LineChart
                  width={500}
                  height={200}
                  data={dataStatistikGrafik}
                  margin={{
                    top: 20,
                    right: 30,
                    left: 20,
                    bottom: 10,
                  }}
                >
                  <CartesianGrid strokeDasharray='3 3' />
                  <XAxis
                    dataKey='name'
                    height={60}
                    tick={<CustomizedAxisTick />}
                  />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line
                    type='monotone'
                    dataKey='ditolak'
                    stroke='#ff0000'
                    label={<CustomizedLabel />}
                  />
                  <Line
                    type='monotone'
                    dataKey='pengajuan'
                    stroke='#0000ff'
                    label={<CustomizedLabel />}
                  />
                  <Line type='monotone' dataKey='selesai' stroke='#008000' />
                </LineChart>
              </ResponsiveContainer>

              <SimpleGrid mt='10' spacing={3} columns={[3]}>
                <ItemStatistik
                  bgColor='green.100'
                  title='Daftar Buku'
                  count={dataStatistik.totalBuku}
                />
                <ItemStatistik
                  bgColor='orange.100'
                  title='Daftar Katalog'
                  count={dataStatistik.totalKatalog}
                />
                <ItemStatistik
                  bgColor='yellow.100'
                  title='Permintaan Pengajuan Buku'
                  count={dataStatistik.totalPengajuanBuku}
                />
                <ItemStatistik
                  bgColor='purple.100'
                  title='Permintaan Pengajuan Buku Selesai'
                  count={dataStatistik.totalPengajuanBukuSelesai}
                />
                <ItemStatistik
                  bgColor='green.600'
                  title='Permintaan Pengajuan Buku Dalam Proses'
                  count={dataStatistik.totalPengajuanBukuDalamProses}
                />
                <ItemStatistik
                  bgColor='red.100'
                  title='Permintaan Pengajuan Buku Gagal'
                  count={dataStatistik.totalPengajuanBukuGagal}
                />
              </SimpleGrid>
              <Box h='5' />
            </Box>
          </Box>
        </Box>
      </AppTemplateProdiDashboard>
    </Layout>
  );
};

export default DashboardProdi;
// export default privateRouteAdmin(DashboardProdi);

interface IItemStatistik {
  bgColor: string;
  title: string;
  count: any;
}

const ItemStatistik: React.FC<IItemStatistik> = ({ bgColor, title, count }) => {
  return (
    <Flex
      w='full'
      // justifyContent='space-between'
      padding='2'
      h='130px'
      alignItems='center'
      gap='10px'
      borderRadius='8px'
      bgColor={bgColor}
    >
      <BiSolidBarChartAlt2 size={50} />
      <Flex flexDirection='column' h='80px' justifyContent='space-between'>
        <Text fontSize='lg'>{title}</Text>
        <Text fontSize='4xl' fontWeight='800'>
          {count}
        </Text>
      </Flex>
    </Flex>
  );
};
