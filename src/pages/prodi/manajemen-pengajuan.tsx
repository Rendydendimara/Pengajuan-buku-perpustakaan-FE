import {
  ArrowLeftIcon,
  ArrowRightIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  Search2Icon,
} from '@chakra-ui/icons';
import AppTemplateProdi from '@/components/templates/AppTemplateProdi';
import LayoutProdi from '@/components/templates/LayoutProdi';
import { APP_NAME, LOCAL_USER_ID } from '@/constant';
import { Button, IconButton } from '@chakra-ui/button';
import { Checkbox } from '@chakra-ui/checkbox';
import { Box, Flex, Text, VStack } from '@chakra-ui/layout';
import type { NextPage } from 'next';
import { getColorStatus } from '@/utils/colors';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { BiArrowBack } from 'react-icons/bi';
import {
  Table,
  Thead,
  Tbody,
  Tfoot,
  Tr,
  Th,
  Td,
  TableCaption,
  TableContainer,
  Input,
  FormControl,
  FormLabel,
  Textarea,
  Tooltip,
  NumberInput,
  NumberInputField,
  NumberInputStepper,
  NumberIncrementStepper,
  NumberDecrementStepper,
  Select,
  createStandaloneToast,
} from '@chakra-ui/react';
import { CiCircleRemove } from 'react-icons/ci';
import { BsFillCartFill } from 'react-icons/bs';
import { usePagination, useTable } from 'react-table';
import { useEffect, useMemo, useState } from 'react';
import moment from 'moment';
import { ApiGetListPengajuanBukuByDosen } from '@/api/pengajuanBuku';
import { useSelector } from 'react-redux';
import { ICombinedState } from '@/provider/redux/store';
import { getProdiName } from '@/utils';
import { getLocal } from '@/lib/LocalStorage/localStorage';

// interface IReduxStateWorkspace {
//   user?: IUser;
// }

interface IDataRow {
  no: number;
  diAjuakanPada: string;
  prodi: string;
  jumlahTotalBuku: number;
  jumlah: number;
  status: string;
  aksi: string;
}
interface IReduxStateWorkspace {
  user: any;
}
const ManajemenPengajuanProdi: NextPage = () => {
  const router = useRouter();
  const userId = getLocal(LOCAL_USER_ID);
  const { toast } = createStandaloneToast();
  const { user } = useSelector<ICombinedState, IReduxStateWorkspace>(
    (state) => {
      return {
        user: state.user.user,
      };
    }
  );

  const [dataPengguna, setDataPengguna] = useState<IDataRow[]>([]);

  const columns = useMemo(
    () => [
      {
        Header: 'No',
        accessor: 'no',
      },
      {
        Header: 'Diajukan Pada',
        accessor: 'diAjuakanPada',
      },
      {
        Header: 'Program Studi',
        accessor: 'prodi',
      },
      {
        Header: 'Jumlah Buku',
        accessor: 'jumlah',
      },
      {
        Header: 'Jumlah Total Buku',
        accessor: 'jumlahTotalBuku',
      },
      {
        Header: 'Status',
        accessor: 'status',
      },
      {
        Header: 'Aksi',
        accessor: 'aksi',
      },
    ],
    []
  );

  // const { user } = useSelector<ICombinedState, IReduxStateWorkspace>(
  //   (state) => {
  //     return {
  //       user: state.user.user,
  //     };
  //   }
  // );

  //   Aksi
  // Status

  const getJumlahTotalBuku = (data: any) => {
    let total = 0;
    data?.buku.map((bk: any) => (total += bk.jumlah));
    return total;
  };

  const getData = async () => {
    const res = await ApiGetListPengajuanBukuByDosen(userId);
    if (res.status === 200) {
      let temp: IDataRow[] = [];
      let total = 0;
      res.data.data.forEach((dt: any) => {
        total += 1;
        temp.push({
          no: total,
          diAjuakanPada: moment(new Date(dt.createdAt)).format('L'),
          prodi: getProdiName(user.programStudi),
          jumlahTotalBuku: getJumlahTotalBuku(dt),
          jumlah: dt.buku.length,
          status: dt.status,
          aksi: dt._id,
        });
      });
      setDataPengguna(temp);
    } else {
      toast({
        status: 'error',
        duration: 5000,
        title: 'Error',
        description: res.data.message,
        position: 'bottom-right',
      });
    }
  };

  useEffect(() => {
    getData();
  }, []);

  return (
    <LayoutProdi showOnlyInfoUser>
      <Head>
        <title>{APP_NAME} | Prodi | Pengajuan</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <AppTemplateProdi>
        <Box w='full'>
          <Link href='/prodi/beranda'>
            <Button leftIcon={<BiArrowBack />} size='md' colorScheme='blue'>
              Kembali
            </Button>
          </Link>
          <Box my='5'>
            <Text fontSize='xl' fontWeight='700'>
              Manajemen Pengajuan Buku
            </Text>
            <Box my='3'>
              <CustomTable
                columns={columns}
                data={dataPengguna}
                getData={getData}
              />
            </Box>
          </Box>
        </Box>
      </AppTemplateProdi>
    </LayoutProdi>
  );
};

export default ManajemenPengajuanProdi;
// export default privateRouteAdmin(ManajemenPengajuanProdi);

function CustomTable({ columns, data, getData }: any) {
  // Use the state and functions returned from useTable to build your UI
  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    prepareRow,
    page, // Instead of using 'rows', we'll use page,
    // which has only the rows for the active page

    // The rest of these things are super handy, too ;)
    canPreviousPage,
    canNextPage,
    pageOptions,
    pageCount,
    gotoPage,
    nextPage,
    previousPage,
    setPageSize,
    state: { pageIndex, pageSize },
  }: any = useTable(
    {
      columns,
      data,
      // initialState: { pageIndex: 2 }
    },
    usePagination
  );

  // Render the UI for your table
  return (
    <>
      <Table {...getTableProps()}>
        <Thead>
          {headerGroups.map((headerGroup: any) => (
            <Tr {...headerGroup.getHeaderGroupProps()}>
              {headerGroup.headers.map((column: any) => (
                <Th {...column.getHeaderProps()}>{column.render('Header')}</Th>
              ))}
            </Tr>
          ))}
        </Thead>
        <Tbody {...getTableBodyProps()}>
          {page.map((row: any, i: any) => {
            prepareRow(row);
            return (
              <Tr key={i} {...row.getRowProps()}>
                {row.cells.map((cell: any, y: number) => {
                  if (cell.column.Header === 'Aksi') {
                    return (
                      <Td key={y} {...cell.getCellProps()}>
                        <Flex alignItems='center' gap='10px'>
                          <Link href={`/prodi/pengajuan/${row.original.aksi}`}>
                            <Button colorScheme='blue'>Detail</Button>
                          </Link>
                        </Flex>
                      </Td>
                    );
                  } else if (cell.column.Header === 'Status') {
                    return (
                      <Td key={y} {...cell.getCellProps()}>
                        <Flex
                          padding='1'
                          borderRadius='10px'
                          alignItems='center'
                          bgColor={getColorStatus(row.original.status)}
                          justifyContent='center'
                        >
                          <Text color='white' fontWeight='700'>
                            {row.original.status}
                          </Text>
                        </Flex>
                      </Td>
                    );
                  } else {
                    return (
                      <Td key={y} {...cell.getCellProps()}>
                        {cell.render('Cell')}
                      </Td>
                    );
                  }
                })}
              </Tr>
            );
          })}
        </Tbody>
      </Table>

      <Flex justifyContent='space-between' m={4} alignItems='center'>
        <Flex>
          <Tooltip label='First Page'>
            <IconButton
              onClick={() => gotoPage(0)}
              isDisabled={!canPreviousPage}
              icon={<ArrowLeftIcon h={3} w={3} />}
              mr={4}
              aria-label='button'
            />
          </Tooltip>
          <Tooltip label='Previous Page'>
            <IconButton
              aria-label='button'
              onClick={previousPage}
              isDisabled={!canPreviousPage}
              icon={<ChevronLeftIcon h={6} w={6} />}
            />
          </Tooltip>
        </Flex>

        <Flex alignItems='center'>
          <Text flexShrink='0' mr={8}>
            Page{' '}
            <Text fontWeight='bold' as='span'>
              {pageIndex + 1}
            </Text>{' '}
            of{' '}
            <Text fontWeight='bold' as='span'>
              {pageOptions.length}
            </Text>
          </Text>
          <Text flexShrink='0'>Go to page:</Text>{' '}
          <NumberInput
            ml={2}
            mr={8}
            w={28}
            min={1}
            max={pageOptions.length}
            onChange={(value: any) => {
              const page = value ? value - 1 : 0;
              gotoPage(page);
            }}
            defaultValue={pageIndex + 1}
          >
            <NumberInputField />
            <NumberInputStepper>
              <NumberIncrementStepper />
              <NumberDecrementStepper />
            </NumberInputStepper>
          </NumberInput>
          <Select
            w={32}
            value={pageSize}
            onChange={(e) => {
              setPageSize(Number(e.target.value));
            }}
          >
            {[10, 20, 30, 40, 50].map((pageSize) => (
              <option key={pageSize} value={pageSize}>
                Show {pageSize}
              </option>
            ))}
          </Select>
        </Flex>

        <Flex>
          <Tooltip label='Next Page'>
            <IconButton
              onClick={nextPage}
              isDisabled={!canNextPage}
              icon={<ChevronRightIcon h={6} w={6} />}
              aria-label='button'
            />
          </Tooltip>
          <Tooltip label='Last Page'>
            <IconButton
              aria-label='button'
              onClick={() => gotoPage(pageCount - 1)}
              isDisabled={!canNextPage}
              icon={<ArrowRightIcon h={3} w={3} />}
              ml={4}
            />
          </Tooltip>
        </Flex>
      </Flex>
    </>
  );
}
